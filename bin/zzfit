#!/usr/bin/env python

from desispec.log import get_logger
from desispec.io.brick import Brick
from desispec.resolution import Resolution
from desispec.io.util import native_endian

import argparse
import numpy as np
import sys
import math
from astropy.io import fits
import zztop
from zztop.line_scan import zz_line_scan
import zztop.io as io
import multiprocessing
import json
import os.path

def _func(arg) :
    return zz_line_scan(**arg)

def main() :

    parser = argparse.ArgumentParser(formatter_class=argparse.ArgumentDefaultsHelpFormatter)

    parser.add_argument('--b', type = str, default = None, required=True,
                        help = 'path of DESI brick in b')
    parser.add_argument('--r', type = str, default = None, required=True,
                        help = 'path of DESI brick in r')
    parser.add_argument('--z', type = str, default = None, required=True,
                        help = 'path of DESI brick in z')
    parser.add_argument('--outfile', type = str, default = None, required=True,
                        help = 'path of output file')
    parser.add_argument('--nspec', type = int, default = None, required=False,
                        help = 'max number of spectra to fit')
    parser.add_argument('--first', type = int, default = 0, required=False,
                        help = 'first spectrum to fit')
    parser.add_argument('--use-truth', action = 'store_true',
                        help = 'use true flux and true vdisp for debugging if exists in bricks')
    parser.add_argument('--ncpu', type = int, default = 1, required=False,
                        help = 'multiprocessing')
    parser.add_argument('--conf', type = str, default = None, required=False,
                        help = 'configuration file')
    parser.add_argument('--type', type = str, default = "ELG", required=False,
                        help = 'configuration file')
    
    
    args = parser.parse_args()
    log=get_logger()

    log.info("starting")

    

    b_brick=Brick(args.b)
    r_brick=Brick(args.r)
    z_brick=Brick(args.z)
    brickname = args.b
    
    elg_spectra=np.where(b_brick.hdu_list[7].data["OBJTYPE"][args.first:]=="ELG")[0]+args.first
    
    #########################################
    ## fit parameters are in config file
    #########################################
    
    if args.conf is None :
        args.conf = "%s/data/zztop.json"%(os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(zztop.__file__)))))
        log.info("will use default config file %s"%args.conf)
        
    try :
        file=open(args.conf)
        data = json.load(file)
        parameters=data["zztop"][args.type]
    except :
        log.error("error when parsing json file:")
        print sys.exc_info()
        sys.exit(12)
        
    results=None

    truth_table_hdu=None
    try :
        b_hdulist = fits.open(args.b)
        truth_table_hdu=b_hdulist["_TRUTH"]
        log.info("brick has truth table")
    except KeyError :
        truth_table_hdu=None
        
    if args.nspec is not None :
        nspec = min(args.nspec,elg_spectra.size)
    else :
        nspec=elg_spectra.size
        
    elg_spectra=elg_spectra[:nspec]
    alltargetids = np.array(b_brick.get_target_ids())
    targetids = alltargetids[elg_spectra]
    
    log.info("will fit %d spectra"%nspec)
    
    func_args = []
        
        
    for spec,s in zip(elg_spectra,range(nspec)) :

        targetid=targetids[s]
        flux=[b_brick.hdu_list[0].data[spec],r_brick.hdu_list[0].data[spec],z_brick.hdu_list[0].data[spec]]
        ivar=[b_brick.hdu_list[1].data[spec],r_brick.hdu_list[1].data[spec],z_brick.hdu_list[1].data[spec]]
        wave=[b_brick.hdu_list[2].data,r_brick.hdu_list[2].data,z_brick.hdu_list[2].data]    
        resolution=[Resolution(native_endian(b_brick.hdu_list[3].data[spec])),Resolution(native_endian(r_brick.hdu_list[3].data[spec])),Resolution(native_endian(z_brick.hdu_list[3].data[spec]))]
        
        arguments={"targetid":targetid, "wave":wave,
                           "flux":flux,"ivar":ivar,"resolution":resolution}
        
        # add fit parameters found in configuration file
        for k in parameters :
            arguments[k]=parameters[k]
                
        
        # for tests
        if args.use_truth :
            arguments["flux"]=[b_brick.hdu_list["_TRUEFLUX"].data[spec],r_brick.hdu_list["_TRUEFLUX"].data[spec],z_brick.hdu_list["_TRUEFLUX"].data[spec]]
            arguments["vdisps"]=[b_brick.hdu_list["_TRUTH"].data["VDISP"][spec]]
            arguments["zmin"]=b_brick.hdu_list["_TRUTH"].data["TRUEZ"][spec]-0.05
            arguments["zmax"]=b_brick.hdu_list["_TRUTH"].data["TRUEZ"][spec]+0.05
            arguments["ntrack"]=3
            arguments["fixed_line_ratio"]=[[0,1,b_brick.hdu_list["_TRUTH"].data["OIIDOUBLET"][spec]]]            
            if arguments.has_key("line_ratio_constraints") : arguments.pop("line_ratio_constraints") 
            if arguments.has_key("line_ratio_priors") : arguments.pop("line_ratio_priors") 
        
        # save all arguments for each spectrum in a list for multiprocessing 
        func_args.append( arguments )
    
    results=[]
    
    if args.ncpu==1 : # simple loop
        
        for arg,spec in zip(func_args,elg_spectra) :
            result = zz_line_scan(**arg)
            results.append(result)
            
            if truth_table_hdu is not None :
                log.info("%d fitted z=%f true z=%f fitted oII=%f true oII=%f\n"%(spec,result["BEST_Z"],truth_table_hdu.data["TRUEZ"][spec],result["BEST_FLUX_3727A"]+result["BEST_FLUX_3729A"],truth_table_hdu.data["OIIFLUX"][spec]*1e17))
                
    else : # use multiprocessing
        
        log.info("starting multiprocessing with %d cpus"%args.ncpu)
        
        pool = multiprocessing.Pool(args.ncpu)
        results =  pool.map(_func, func_args)
        
    
    # reformat results matching initial target ids (multiprocessing shuffles the results)
    dtype = list()
    for key in results[0].keys() :
        if key=="TARGETID" :
            dtype.append( (key, np.int64) ) 
        else :
            dtype.append( (key, np.float32) )
    formatted_results = np.empty(len(results), dtype=dtype)
        
    for result in results :
        i=np.where(targetids==result["TARGETID"])[0][0]
        for key in result.keys() :
            formatted_results[key][i]=result[key]
    
    io.write_zbest(args.outfile,brickname,formatted_results,truth_table_hdu)
    log.info("wrote %s"%args.outfile)
    log.info("the end")
    

if __name__ == '__main__':
    main()
    

